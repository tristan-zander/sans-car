// <auto-generated />
using System;
using System.Collections.Generic;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(SansDbContext))]
    [Migration("20211112032727_UpdateTo6.0")]
    partial class UpdateTo60
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Data.AudioPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActiveTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("SongQueueId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("VoiceChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SongQueueId");

                    b.HasIndex("VoiceChannelId");

                    b.ToTable("AudioPlayer");
                });

            modelBuilder.Entity("Data.Channel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Data.Guild", b =>
                {
                    b.Property<decimal>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("AllowAudio")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowQuotes")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSearchCommands")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("AudioPlayerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnableQuoteChannel")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasAgreedToToS")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("QuoteChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId");

                    b.HasIndex("AudioPlayerId");

                    b.HasIndex("QuoteChannelId");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Data.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DiscordMessage")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<decimal?>("OwnerId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<List<string>>("PreviouslyModifiedQuotes")
                        .HasColumnType("text[]");

                    b.Property<DateTimeOffset>("TimeAdded")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("Data.Song", b =>
                {
                    b.Property<string>("SongId")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("interval");

                    b.Property<Guid?>("SongQueueId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SongId");

                    b.HasIndex("SongQueueId");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("Data.SongQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SongQueue");
                });

            modelBuilder.Entity("Data.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Data.AudioPlayer", b =>
                {
                    b.HasOne("Data.SongQueue", "SongQueue")
                        .WithMany()
                        .HasForeignKey("SongQueueId");

                    b.HasOne("Data.Channel", "VoiceChannel")
                        .WithMany()
                        .HasForeignKey("VoiceChannelId");

                    b.Navigation("SongQueue");

                    b.Navigation("VoiceChannel");
                });

            modelBuilder.Entity("Data.Guild", b =>
                {
                    b.HasOne("Data.AudioPlayer", "AudioPlayer")
                        .WithMany()
                        .HasForeignKey("AudioPlayerId");

                    b.HasOne("Data.Channel", "QuoteChannel")
                        .WithMany()
                        .HasForeignKey("QuoteChannelId");

                    b.Navigation("AudioPlayer");

                    b.Navigation("QuoteChannel");
                });

            modelBuilder.Entity("Data.Quote", b =>
                {
                    b.HasOne("Data.Guild", "Guild")
                        .WithMany("Quotes")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Guild");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Data.Song", b =>
                {
                    b.HasOne("Data.SongQueue", null)
                        .WithMany("Queue")
                        .HasForeignKey("SongQueueId");
                });

            modelBuilder.Entity("Data.User", b =>
                {
                    b.HasOne("Data.Quote", null)
                        .WithMany("Mentions")
                        .HasForeignKey("QuoteId");
                });

            modelBuilder.Entity("Data.Guild", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("Data.Quote", b =>
                {
                    b.Navigation("Mentions");
                });

            modelBuilder.Entity("Data.SongQueue", b =>
                {
                    b.Navigation("Queue");
                });
#pragma warning restore 612, 618
        }
    }
}
